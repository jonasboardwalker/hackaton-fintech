generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("POSTGRES_PRISMA_URL") // Pooled connection
  directUrl    = env("POSTGRES_URL_NON_POOLING") // Direct connection
  relationMode = "prisma"
}

model User {
  id        String   @id @default(uuid())
  clerkId   String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  apiKey    String   @unique

  // Relations
  clients        Client[]
  rules          Rule[]
  transactions   Transaction[]
  alerts         Alert[]
  suggestions    Suggestion[]
  dashboardStats DashboardStats[]

  @@index([clerkId])
  @@index([createdAt])
}

model Client {
  id        String   @id @default(uuid())
  email     String   @unique
  role      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  userId       String
  user         User          @relation(fields: [userId], references: [id])
  Transactions Transaction[]
  Alerts       Alert[]

  @@index([role])
  @@index([createdAt])
  @@index([userId])
}

model Rule {
  id          String   @id @default(uuid())
  name        String
  description String?
  parameters  Json // Contains all rule parameters (thresholds, time windows, geo restrictions, etc.)
  action      String // "deny", "alert", "allow"
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  userId      String
  user        User         @relation(fields: [userId], references: [id])
  Alerts      Alert[]
  Suggestions Suggestion[]

  @@index([name])
  @@index([userId])
}

model Transaction {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())

  // References
  userId   String
  user     User   @relation(fields: [userId], references: [id])
  clientId String
  client   Client @relation(fields: [clientId], references: [id])

  // Transaction details
  amount   Float
  status   String // "allowed", "denied", "alerted"
  metadata Json // Contains all transaction metadata (IP, location, device info, currency, etc.)

  // Related alerts
  Alerts Alert[]

  @@index([createdAt])
  @@index([userId])
  @@index([clientId])
  @@index([status])
}

model Alert {
  id         String    @id @default(uuid())
  createdAt  DateTime  @default(now())
  resolvedAt DateTime?
  status     String // "open", "resolved"
  resolution String? // "approved", "rejected"
  notes      String?

  // References
  userId   String
  user     User   @relation(fields: [userId], references: [id])
  clientId String
  client   Client @relation(fields: [clientId], references: [id])

  transactionId String
  transaction   Transaction @relation(fields: [transactionId], references: [id])

  // Many-to-many relation with rules
  rules Rule[]

  @@index([createdAt])
  @@index([status])
  @@index([userId])
  @@index([clientId])
  @@index([transactionId])
}

model Suggestion {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())

  // References
  userId String
  user   User   @relation(fields: [userId], references: [id])
  ruleId String
  rule   Rule   @relation(fields: [ruleId], references: [id])

  // Suggestion details
  type        String // "threshold", "time", "geo", "velocity"
  description String
  confidence  Float // 0-1 confidence score
  applied     Boolean @default(false)
  changes     Json // Contains the suggested changes to the rule parameters

  @@index([createdAt])
  @@index([userId])
  @@index([ruleId])
  @@index([type])
}

model DashboardStats {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())

  // References
  userId String
  user   User   @relation(fields: [userId], references: [id])

  // Daily stats
  totalTransactions Int
  totalAmount       Float
  allowedCount      Int
  deniedCount       Int
  alertedCount      Int

  // Alert stats
  openAlerts     Int
  resolvedAlerts Int

  // Rule stats
  activeRules Int

  @@index([createdAt])
  @@index([userId])
}
